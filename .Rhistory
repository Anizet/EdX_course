source('C:/Users/Arnaud/projects/EdX_course/R_scripts/Assessment24.R', echo=TRUE)
source('C:/Users/Arnaud/projects/EdX_course/R_scripts/Assessment24.R', echo=TRUE)
source('C:/Users/Arnaud/projects/EdX_course/R_scripts/Assessment24.R', echo=TRUE)
source('C:/Users/Arnaud/projects/EdX_course/R_scripts/Assessment24.R', echo=TRUE)
source('C:/Users/Arnaud/projects/EdX_course/R_scripts/Assessment24.R', echo=TRUE)
source('C:/Users/Arnaud/projects/EdX_course/R_scripts/Assessment24.R', echo=TRUE)
source('C:/Users/Arnaud/projects/EdX_course/R_scripts/Assessment24.R', echo=TRUE)
source('C:/Users/Arnaud/projects/EdX_course/R_scripts/Assessment24.R', echo=TRUE)
source('C:/Users/Arnaud/projects/EdX_course/R_scripts/Assessment24.R', echo=TRUE)
library(tidyverse)
library(caret)
set.seed(1)
n <- 100
Sigma <- 9*matrix(c(1.0, 0.5, 0.5, 1.0), 2, 2)
dat <- MASS::mvrnorm(n = 100, c(69, 69), Sigma) %>%
data.frame() %>% setNames(c("x", "y"))
set.seed(1)
q1 <- replicate(100,{
index <- createDataPartition(dat$y, times = 2, p = 0.5, list = FALSE)
test_dat <- dat[index,]
train_dat <- dat[-index,]
fit <- lm(y ~ x, data = train_dat)
y_hat <- predict(fit, test_dat)
sqrt(mean((y_hat - test_dat$y))^2)
})
mean(q1)
sd(q1)
library(tidyverse)
library(caret)
set.seed(1)
n <- 100
Sigma <- 9*matrix(c(1.0, 0.5, 0.5, 1.0), 2, 2)
dat <- MASS::mvrnorm(n = 100, c(69, 69), Sigma) %>%
data.frame() %>% setNames(c("x", "y"))
set.seed(1)
q1 <- replicate(100,{
index <- createDataPartition(dat$y, times = 2, p = 0.5, list = FALSE)
test_dat <- dat[index,]
train_dat <- dat[-index,]
fit <- lm(y ~ x, data = train_dat)
y_hat <- predict(fit, test_dat)
sqrt(mean((y_hat - test_dat$y))^2)
})
mean(q1)
sd(q1)
mean(q1)
sd(q1)
mean(q1)
sd(q1)
set.seed(1)
n <- 100
Sigma <- 9*matrix(c(1.0, 0.5, 0.5, 1.0), 2, 2)
dat <- MASS::mvrnorm(n = 100, c(69, 69), Sigma) %>%
data.frame() %>% setNames(c("x", "y"))
set.seed(1)
q1 <- replicate(100,{
index <- createDataPartition(dat, times = 2, p = 0.5, list = FALSE)
test_dat <- dat[index,]
train_dat <- dat[-index,]
fit <- lm(y ~ x, data = train_dat)
y_hat <- predict(fit, test_dat)
sqrt(mean((y_hat - test_dat$y))^2)
})
mean(q1)
sd(q1)
library(tidyverse)
library(caret)
set.seed(1)
n <- 100
Sigma <- 9*matrix(c(1.0, 0.5, 0.5, 1.0), 2, 2)
dat <- MASS::mvrnorm(n = 100, c(69, 69), Sigma) %>%
data.frame() %>% setNames(c("x", "y"))
set.seed(1)
q1 <- replicate(100,{
index <- createDataPartition(dat$y, times = 2, p = 0.5, list = FALSE)
test_dat <- dat[index,]
train_dat <- dat[-index,]
fit <- lm(y ~ x, data = train_dat)
y_hat <- predict(fit, test_dat)
sqrt(mean((y_hat - test_dat$y))^2)
})
mean(q1)
sd(q1)
mean(q1)
sd(q1)
library(tidyverse)
library(caret)
set.seed(1)
n <- 100
Sigma <- 9*matrix(c(1.0, 0.5, 0.5, 1.0), 2, 2)
dat <- MASS::mvrnorm(n = 100, c(69, 69), Sigma) %>%
data.frame() %>% setNames(c("x", "y"))
set.seed(1)
q1 <- replicate(100,{
index <- createDataPartition(dat$y, times = 1, p = 0.5, list = FALSE)
test_dat <- dat[index,]
train_dat <- dat[-index,]
fit <- lm(y ~ x, data = train_dat)
y_hat <- predict(fit, test_dat)
sqrt(mean((y_hat - test_dat$y))^2)
})
mean(q1)
sd(q1)
source('C:/Users/Arnaud/projects/EdX_course/R_scripts/Assessment24.R', echo=TRUE)
test_dat <- dat[index,]
index <- createDataPartition(dat$y, times = 1, p = 0.5, list = FALSE)
test_dat <- dat[index,]
train_dat <- dat[-index,]
View(test_dat)
View(train_dat)
test_dat <- dat[index,]
train_dat <- dat[-index,]
test_dat <- dat %>% slice(index)
test_dat <- dat[index,]
View(test_dat)
test_dat <- dat %>% slice(index)
View(test_dat)
index <- createDataPartition(dat$y, times = 1, p = 0.5, list = FALSE)
test_dat <- dat[index,]
train_dat <- dat[-index,]
test_dat1 <- dat %>% slice(index)
train_dat1 <- dat %>% slice(-index)
View(test_dat)
View(test_dat1)
View(train_dat)
View(train_dat1)
library(tidyverse)
library(caret)
set.seed(1)
n <- 100
Sigma <- 9*matrix(c(1.0, 0.5, 0.5, 1.0), 2, 2)
dat <- MASS::mvrnorm(n = 100, c(69, 69), Sigma) %>%
data.frame() %>% setNames(c("x", "y"))
set.seed(1)
q1 <- replicate(100,{
index <- createDataPartition(dat$y, times = 1, p = 0.5, list = FALSE)
test_dat <- dat[index,]
train_dat <- dat[-index,]
fit <- lm(y ~ x, data = train_dat)
y_hat <- predict(fit, newdata = test_dat)
sqrt(mean((y_hat - test_dat$y))^2)
})
mean(q1)
sd(q1)
set.seed(1)
n <- 100
Sigma <- 9*matrix(c(1.0, 0.5, 0.5, 1.0), 2, 2)
dat <- MASS::mvrnorm(n = 100, c(69, 69), Sigma) %>%
data.frame() %>% setNames(c("x", "y"))
set.seed(1)
q1 <- replicate(100,{
index <- createDataPartition(dat$y, times = 1, p = 0.5, list = FALSE)
test_dat <- dat[index,]
train_dat <- dat[-index,]
fit <- lm(y ~ x, data = train_dat)
y_hat <- predict(fit, newdata = test_dat)
sqrt(mean((y_hat - test_dat$y))^2)
})
mean(q1)
sd(q1)
library(tidyverse)
library(caret)
set.seed(1)
n <- 100
Sigma <- 9*matrix(c(1.0, 0.5, 0.5, 1.0), 2, 2)
dat <- MASS::mvrnorm(n = 100, c(69, 69), Sigma) %>%
data.frame() %>% setNames(c("x", "y"))
set.seed(1)
q1 <- replicate(100,{
index <- createDataPartition(dat$y, times = 1, p = 0.5, list = FALSE)
test_dat <- dat[index,]
train_dat <- dat[-index,]
fit <- lm(y ~ x, data = train_dat)
y_hat <- predict(fit, newdata = test_dat)
sqrt(mean((y_hat - test_dat$y))^2)
})
mean(q1)
sd(q1)
2*187 + 291
2*187 + 291
?sample
time <- c(0:100)
mean(time)
distribution <- sample(time, 100, replace = TRUE)
mean(distribution)
?replicate
distribution <- replicate(10000, {
mean(x)
distribution <- replicate(10000, {
distribution <- replicate(10000, {
mean(x)
}
distribution <- replicate(10000, {
x <- sample(time, 100, replace = TRUE)
mean(x)
})
mean(distribution)
distribution <- replicate(10000, {
x <- sample(time, 100, replace = TRUE)
mean(x)
})
mean(distribution)
distribution <- replicate(10000, {
x <- sample(time, 100, replace = TRUE)
mean(x)
})
mean(distribution)
distribution <- replicate(10000, {
x <- sample(time, 100, replace = TRUE)
mean(x)
})
mean(distribution)
dist <- sample(time, 100, replace = TRUE)
dist <- sample(time, 100, replace = TRUE)
mean(dist)
dist <- function{
dist <- sample(time, 100, replace = TRUE)
mean(dist)
}
dist <- function{
dist <- sample(time, 100, replace = TRUE)
mean(dist) }
dist <- function({
dist <- sample(time, 100, replace = TRUE)
mean(dist)
})
dist <- function({
dist <- sample(time, 100, replace = TRUE)
mean(dist)
})
dist <- function(){
dist <- sample(time, 100, replace = TRUE)
mean(dist)
}
dist
dist
dist
dist
dist
dist <- function(){
s <- sample(time, 100, replace = TRUE)
mean(s)
}
dist
dist
dist
dist <- function(){
s <- sample(time, 100, replace = TRUE)
return(mean(s))
}
dist
dist
dist
View(dist)
dist()
dist()
dist()
dist()
dist()
dist()
dist()
dist()
dist()
dist()
dist()
dist()
dist()
dist()
dist()
dist()
dist()
dist()
dist()
dist()
dist()
dist()
distribution <- replicate(10000, {
x <- sample(time, 100, replace = TRUE)
mean(x)
})
mean(distribution)
distribution <- replicate(10000, {
x <- sample(time, 100, replace = TRUE)
mean(x)
})
mean(distribution)
distribution <- replicate(10000, {
x <- sample(time, 100, replace = TRUE)
mean(x)
})
mean(distribution)
dist <- function(){
s <- sample(time, 100, replace = TRUE)
return(mean(s))
}
dist()
dist()
dist()
dist()
dist()
time <- c(0:100)
mean(time)
time <- c(0:100)
mean(time)
distribution <- replicate(10000, {
x <- sample(time, 100, replace = TRUE)
mean(x)
})
mean(distribution)
distribution <- replicate(10000, {
x <- sample(time, 100, replace = TRUE)
mean(x)
})
mean(distribution)
distribution <- replicate(10000, {
x <- sample(time, 100, replace = TRUE)
mean(x)
})
mean(distribution)
distribution <- replicate(10000, {
x <- sample(time, 100, replace = TRUE)
mean(x)
})
mean(distribution)
distribution <- replicate(10000, {
x <- sample(time, 100, replace = TRUE)
mean(x)
})
mean(distribution)
distribution <- replicate(10000, {
x <- sample(time, 100, replace = TRUE)
mean(x)
})
mean(distribution)
(HistData)
#example
#compute RSS for any pair of beta0 and beta1 in Galton's data
library(HistData)
data("GaltonFamilies")
set.seed(1983)
galton_heights <- GaltonFamilies %>%
filter(gender == "male") %>%
group_by(family) %>%
sample_n(1) %>%
ungroup() %>%
select(father, childHeight) %>%
rename(son = childHeight)
rss <- function(beta0, beta1, data){
resid <- galton_heights$son - (beta0+beta1*galton_heights$father)
return(sum(resid^2))
}
# plot RSS as a function of beta1 when beta0=25
beta1 = seq(0, 1, len=nrow(galton_heights))
results <- data.frame(beta1 = beta1,
rss = sapply(beta1, rss, beta0 = 25))
results %>% ggplot(aes(beta1, rss)) + geom_line() +
geom_line(aes(beta1, rss))
#example
#compute RSS for any pair of beta0 and beta1 in Galton's data
library(tidyverse)
library(HistData)
data("GaltonFamilies")
set.seed(1983)
galton_heights <- GaltonFamilies %>%
filter(gender == "male") %>%
group_by(family) %>%
sample_n(1) %>%
ungroup() %>%
select(father, childHeight) %>%
rename(son = childHeight)
rss <- function(beta0, beta1, data){
resid <- galton_heights$son - (beta0+beta1*galton_heights$father)
return(sum(resid^2))
}
# plot RSS as a function of beta1 when beta0=25
beta1 = seq(0, 1, len=nrow(galton_heights))
results <- data.frame(beta1 = beta1,
rss = sapply(beta1, rss, beta0 = 25))
results %>% ggplot(aes(beta1, rss)) + geom_line() +
geom_line(aes(beta1, rss))
fit <- lm(son ~ father, data = galton_heights) # father is used for predicting and son is the thing we want to predict
summary(fit) # extracts more information from the model we just made, its the code we were seeing in probability 2 !!!!!!
# predict Y directly
fit <- galton_heights %>% lm(son ~ father, data = .)
Y_hat <- predict(fit, se.fit = TRUE)
names(Y_hat)
Y_hat
# plot best fit line
galton_heights %>%
mutate(Y_hat = predict(lm(son ~ father, data=.))) %>%
ggplot(aes(father, Y_hat))+
geom_line()
#!!!!!!! plot predictions and confidence intervals
galton_heights %>% ggplot(aes(son, father)) +
geom_point() +
geom_smooth(method = "lm") #constructs the regression model with a 95% confidence interval
x1 <- 17.62/20 *(2+6+8+7+6+5+5)
x2 <- 14.87/20 *(2+5+4+5+5+4+5+5+4+5+5+4)
x3 <- 15.54/20 *(2+3+5+2+3+5+5+3+3+4+3+3+3+5+5+5)
x4 <- (2+6+8+7+6+5+5) + (2+5+4+5+5+4+5+5+4+5+5+4) + (2+3+5+2+3+5+5+3+3+4+3+3+3+5+5+5)
bac_rate <- ((x1+x2+x3)/x4)*20
bac_rate20 <- (((x1+x2+x3+(5)))/(x4+5))*20
bac_rate16 <- (((x1+x2+x3+(0.8*5)))/(x4+5))*20
# summary statistics
sample_n(galton_heights, N, replace = TRUE) %>%
lm(son ~ father, data = .) %>%
summary %>%
.$coef
# summary statistics
sample_n(galton_heights, N, replace = TRUE) %>%
lm(son ~ father, data = .) %>%
summary %>%
.$coef
# Monte Carlo simulation
B <- 1000
N <- 50
lse <- replicate(B, {
sample_n(galton_heights, N, replace = TRUE) %>%
lm(son ~ father, data = .) %>%
.$coef
})
lse <- data.frame(beta_0 = lse[1,], beta_1 = lse[2,])
# Plot the distribution of beta_0 and beta_1
library(gridExtra)
p1 <- lse %>% ggplot(aes(beta_0)) + geom_histogram(binwidth = 5, color = "black")
p2 <- lse %>% ggplot(aes(beta_1)) + geom_histogram(binwidth = 0.1, color = "black")
grid.arrange(p1, p2, ncol = 2)
# summary statistics
sample_n(galton_heights, N, replace = TRUE) %>%
lm(son ~ father, data = .) %>%
summary %>%
.$coef
summary(fit) # extracts more information from the model we just made, its the code we were seeing in probability 2 !!!!!!
# summary statistics
sample_n(galton_heights, N, replace = TRUE) %>%
lm(son ~ father, data = .) %>%
summary() %>%
.$coef
# summary statistics
sample_n(galton_heights, N, replace = TRUE) %>%
lm(son ~ father, data = .) %>%
summary() %>%
.$coef
# summary statistics
sample_n(galton_heights, N, replace = TRUE) %>%
lm(son ~ father, data = .) %>%
summary() %>%
.$coef
# summary statistics
sample_n(galton_heights, N, replace = TRUE) %>%
lm(son ~ father, data = .) %>%
summary() %>%
.$coef
# summary statistics
sample_n(galton_heights, N, replace = TRUE) %>%
lm(son ~ father, data = .) %>%
summary() %>%
.$coef
library(tidyverse)
library(HistData)
options(digits = 4)
data("GaltonFamilies")
set.seed(1) # if you are using R 3.5 or earlier
galton <- GaltonFamilies %>%
group_by(family, gender) %>%
sample_n(1) %>%
ungroup() %>%
gather(parent, parentHeight, father:mother) %>%
mutate(child = ifelse(gender == "female", "daughter", "son")) %>%
unite(pair, c("parent", "child"))
galton %>% group_by(pair) %>% summarize(n())
galton %>% group_by(pair) %>% summarize(cor(parentHeight,childHeight))
library(broom)
galton %>% group_by(pair) %>% do(tidy(lm(childHeight ~ parentHeight, data = .), conf.int = TRUE))
galton %>% group_by(pair) %>% do(tidy(lm(childHeight ~ parentHeight, data = .), conf.int = TRUE)) %>% summary
x <- galton %>% group_by(pair) %>% do(tidy(lm(childHeight ~ parentHeight, data = .), conf.int = TRUE)) %>% summary
x
x <- galton %>% group_by(pair) %>% do(tidy(lm(childHeight ~ parentHeight, data = .), conf.int = TRUE))
galton %>% group_by(pair) %>% do(tidy(lm(childHeight ~ parentHeight, data = .), conf.int = TRUE))
library(tidyverse)
library(HistData)
options(digits = 4)
data("GaltonFamilies")
set.seed(1) # if you are using R 3.5 or earlier
galton <- GaltonFamilies %>%
group_by(family, gender) %>%
sample_n(1) %>%
ungroup() %>%
gather(parent, parentHeight, father:mother) %>%
mutate(child = ifelse(gender == "female", "daughter", "son")) %>%
unite(pair, c("parent", "child"))
galton %>% group_by(pair) %>% summarize(n())
galton %>% group_by(pair) %>% summarize(cor(parentHeight,childHeight))
library(broom)
galton %>% group_by(pair) %>% do(tidy(lm(childHeight ~ parentHeight, data = .), conf.int = TRUE))
fit <- lm(son ~ father, data = galton_heights) # father is used for predicting and son is the thing we want to predict
#example
#compute RSS for any pair of beta0 and beta1 in Galton's data
library(tidyverse)
library(HistData)
data("GaltonFamilies")
set.seed(1983)
galton_heights <- GaltonFamilies %>%
filter(gender == "male") %>%
group_by(family) %>%
sample_n(1) %>%
ungroup() %>%
select(father, childHeight) %>%
rename(son = childHeight)
fit <- lm(son ~ father, data = galton_heights) # father is used for predicting and son is the thing we want to predict
summary(fit) # extracts more information from the model we just made, its the code we were seeing in probability 2 !!!!!!
tidy(fit, conf.int = TRUE)
