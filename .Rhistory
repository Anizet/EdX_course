sample_n(1) %>%
ungroup() %>%
gather(parent, parentHeight, father:mother) %>%
mutate(child = ifelse(gender == "female", "daughter", "son")) %>%
unite(pair, c("parent", "child"))
galton %>% group_by(pair) %>% summarize(n())
galton %>% group_by(pair) %>% summarize(cor(parentHeight,childHeight))
library(broom)
galton %>% group_by(pair) %>% do(tidy(lm(childHeight ~ parentHeight, data = .), conf.int = TRUE))
fit <- lm(son ~ father, data = galton_heights) # father is used for predicting and son is the thing we want to predict
#example
#compute RSS for any pair of beta0 and beta1 in Galton's data
library(tidyverse)
library(HistData)
data("GaltonFamilies")
set.seed(1983)
galton_heights <- GaltonFamilies %>%
filter(gender == "male") %>%
group_by(family) %>%
sample_n(1) %>%
ungroup() %>%
select(father, childHeight) %>%
rename(son = childHeight)
fit <- lm(son ~ father, data = galton_heights) # father is used for predicting and son is the thing we want to predict
summary(fit) # extracts more information from the model we just made, its the code we were seeing in probability 2 !!!!!!
tidy(fit, conf.int = TRUE)
a <- 14.249
b <- qt(0.975, 10)
c <- qt(0025, 10)
c <- qt(0.025, 10)
sem <- 0.24566
IC <- (a+c*sem, a+b*sem)
IC <- c(a+c*sem, a+b*sem)
var <- 0.77685^2
chi10_095 <- qchisq(0.95,10)
chi10_005 <- qchisq(0.05,10)
chi10_095 <- qchisq(0.95,9)
chi10_005 <- qchisq(0.05,9)
IC_var <- c(9*var/chi10_095, 9*var/chi10_005)
IC_std <- sqrt(IC_var)
x <- 15.5517-14.784
15.5517+ x
1.20858/sqrt(12)
t_obs <- ((15.5517-14.2490)/sqrt((1.20858^2/12)+(0.77685^2/10)))
-1.3027/0.4267
(12+10-2)
set.seed(2)
make_data <- function(n = 1000, p = 0.5,
mu_0 = 0, mu_1 = 2,
sigma_0 = 1,  sigma_1 = 1){
y <- rbinom(n, 1, p)
f_0 <- rnorm(n, mu_0, sigma_0)
f_1 <- rnorm(n, mu_1, sigma_1)
x <- ifelse(y == 1, f_1, f_0)
test_index <- createDataPartition(y, times = 1, p = 0.5, list = FALSE)
list(train = data.frame(x = x, y = as.factor(y)) %>% slice(-test_index),
test = data.frame(x = x, y = as.factor(y)) %>% slice(test_index))
}
dat <- make_data()
library(tidyverse)
library(caret)
set.seed(2)
make_data <- function(n = 1000, p = 0.5,
mu_0 = 0, mu_1 = 2,
sigma_0 = 1,  sigma_1 = 1){
y <- rbinom(n, 1, p)
f_0 <- rnorm(n, mu_0, sigma_0)
f_1 <- rnorm(n, mu_1, sigma_1)
x <- ifelse(y == 1, f_1, f_0)
test_index <- createDataPartition(y, times = 1, p = 0.5, list = FALSE)
list(train = data.frame(x = x, y = as.factor(y)) %>% slice(-test_index),
test = data.frame(x = x, y = as.factor(y)) %>% slice(test_index))
}
dat <- make_data()
dat$train %>% ggplot(aes(x, color = y)) + geom_density()
set.seed(1)
gulugulu <- replicate(n = 25, make_data(mu_1 = seq(0, 3, len = 25)))
fit <- glm(y ~ x, data = gulugulu[[1]], family = "binomial")
y_hat <- predict(fit, newdata = gulugulu[[2]], type = "response")
View(gulugulu)
confusionMatrix(y_hat_logit, gulugulu[[2]])$overall[['Accuracy']]
y_hat_logit <- ifelse(y_hat > 0.5, 1, 0)
confusionMatrix(y_hat_logit, gulugulu[[2]])$overall[['Accuracy']]
y_hat_logit <- ifelse(y_hat > 0.5, 1, 0) %>% factor()
confusionMatrix(y_hat_logit, gulugulu[[2]])$overall[['Accuracy']]
y_hat_logit <- ifelse(y_hat > 0.5, "1", "0") %>% factor()
confusionMatrix(y_hat_logit, gulugulu[[2]])$overall[['Accuracy']]
confusionMatrix(y_hat, gulugulu[[2]])$overall[['Accuracy']]
confusionMatrix(y_hat, factor(gulugulu[[2]]))$overall[['Accuracy']]
y_hat <- factor(predict(fit, newdata = gulugulu[[2]], type = "response"))
y_hat_logit <- ifelse(y_hat > 0.5, "1", "0") %>% factor()
y_hat <- factor(predict(fit, newdata = gulugulu[[2]], type = "response"))
y_hat_logit <- ifelse(y_hat > 0.5, "1", "0") %>% factor()
confusionMatrix(y_hat, factor(gulugulu[[2]]))$overall[['Accuracy']]
y_hat_logit <- ifelse(y_hat > 0.5, 1, 0) %>% factor()
confusionMatrix(y_hat_logit, factor(gulugulu[[2]]))$overall[['Accuracy']]
y_hat <- predict(fit, newdata = gulugulu[[2]], type = "response")
y_hat_logit <- ifelse(y_hat > 0.5, 1, 0) %>% factor()
confusionMatrix(y_hat_logit, factor(gulugulu[[2]]))$overall[['Accuracy']]
View(gulugulu)
?accuracy
mean(y_hat_logit == gulugulu[[2]])
View(gulugulu)
set.seed(2)
make_data <- function(n = 1000, p = 0.5,
mu_0 = 0, mu_1 = 2,
sigma_0 = 1,  sigma_1 = 1){
y <- rbinom(n, 1, p)
f_0 <- rnorm(n, mu_0, sigma_0)
f_1 <- rnorm(n, mu_1, sigma_1)
x <- ifelse(y == 1, f_1, f_0)
test_index <- createDataPartition(y, times = 1, p = 0.5, list = FALSE)
list(train = data.frame(x = x, y = as.factor(y)) %>% slice(-test_index),
test = data.frame(x = x, y = as.factor(y)) %>% slice(test_index))
}
dat <- make_data()
set.seed(1)
gulugulu <- replicate(n = 25, make_data(mu_1 = seq(0, 3, len = 25)))
fit <- glm(y ~ x, data = gulugulu[[1]], family = "binomial")
y_hat <- predict(fit, newdata = gulugulu[[2]], type = "response")
y_hat_logit <- ifelse(y_hat > 0.5, 1, 0) %>% factor()
mean(y_hat_logit == gulugulu[[2]]$y)
View(gulugulu)
set.seed(1)
gulugulu <- replicate(n = 25, make_data(mu_1 = seq(0, 3, len = 25)))
res <- for (i in 1:50) {
fit <- glm(y ~ x, data = gulugulu[[i]], family = "binomial")
y_hat <- predict(fit, newdata = gulugulu[[(i+1)]], type = "response")
y_hat_logit <- ifelse(y_hat > 0.5, 1, 0) %>% factor()
mean(y_hat_logit == gulugulu[[(i+1)]]$y)
}
res <- for (i in 1:50) {
fit <- glm(y ~ x, data = gulugulu[[i]], family = "binomial")
y_hat <- predict(fit, newdata = gulugulu[[(i+1)]], type = "response")
y_hat_logit <- ifelse(y_hat > 0.5, 1, 0) %>% factor()
mean(y_hat_logit == gulugulu[[(i+1)]]$y)
}
res <- for (i in 1:49) {
fit <- glm(y ~ x, data = gulugulu[[i]], family = "binomial")
y_hat <- predict(fit, newdata = gulugulu[[(i+1)]], type = "response")
y_hat_logit <- ifelse(y_hat > 0.5, 1, 0) %>% factor()
mean(y_hat_logit == gulugulu[[(i+1)]]$y)
}
res <- for (i in 1:49) {
fit <- glm(y ~ x, data = gulugulu[[i]], family = "binomial")
y_hat <- predict(fit, newdata = gulugulu[[(i+1)]], type = "response")
y_hat_logit <- ifelse(y_hat > 0.5, 1, 0) %>% factor()
return(mean(y_hat_logit == gulugulu[[(i+1)]]$y))
}
res <- for (i in 1:49) {
fit <- glm(y ~ x, data = gulugulu[[i]], family = "binomial")
y_hat <- predict(fit, newdata = gulugulu[[(i+1)]], type = "response")
y_hat_logit <- ifelse(y_hat > 0.5, 1, 0) %>% factor()
return(mean(y_hat_logit == gulugulu[[(i+1)]]$y))
}
res <- function(){
for (i in 1:49) {
fit <- glm(y ~ x, data = gulugulu[[i]], family = "binomial")
y_hat <- predict(fit, newdata = gulugulu[[(i+1)]], type = "response")
y_hat_logit <- ifelse(y_hat > 0.5, 1, 0) %>% factor()
return(mean(y_hat_logit == gulugulu[[(i+1)]]$y))
}}
res()
res <- function(i){
fit <- glm(y ~ x, data = gulugulu[[i]], family = "binomial")
y_hat <- predict(fit, newdata = gulugulu[[(i+1)]], type = "response")
y_hat_logit <- ifelse(y_hat > 0.5, 1, 0) %>% factor()
return(mean(y_hat_logit == gulugulu[[(i+1)]]$y))
}
res(i = c(1:49))
sapply(c(1:49), trd)
sapply(c(1:49), res)
results <- sapply(c(1:49), res)
mu_1 = seq(0, 3, len = 25)
results <- sapply(c(1:49), res)
mu_1 = seq(0, 3, len = 25)
ploty <- tibble(resulst = resulst, mu_1 = mu_1)
ploty <- tibble(results = resulst, mu_1 = mu_1)
ploty <- tibble(results = results, mu_1 = mu_1)
results <- sapply(seq(1,50,2), res)
mu_1 = seq(0, 3, len = 25)
ploty <- tibble(results = results, mu_1 = mu_1)
View(ploty)
ploty %>% ggplot(aes(mu_1, results)) %>% geom_point()
ploty %>% ggplot(aes(mu_1, results)) + geom_point()
set.seed(2)
make_data <- function(n = 1000, p = 0.5,
mu_0 = 0, mu_1 = 2,
sigma_0 = 1,  sigma_1 = 1){
y <- rbinom(n, 1, p)
f_0 <- rnorm(n, mu_0, sigma_0)
f_1 <- rnorm(n, mu_1, sigma_1)
x <- ifelse(y == 1, f_1, f_0)
test_index <- createDataPartition(y, times = 1, p = 0.5, list = FALSE)
list(train = data.frame(x = x, y = as.factor(y)) %>% slice(-test_index),
test = data.frame(x = x, y = as.factor(y)) %>% slice(test_index))
}
dat <- make_data()
set.seed(1)
gulugulu <- replicate(n = 25, make_data(mu_1 = seq(0, 3, len = 25)))
res <- function(i){
fit <- glm(y ~ x, data = gulugulu[[i]], family = "binomial")
y_hat <- predict(fit, newdata = gulugulu[[(i+1)]], type = "response")
y_hat_logit <- ifelse(y_hat > 0.5, 1, 0) %>% factor()
return(mean(y_hat_logit == gulugulu[[(i+1)]]$y))
}
results <- sapply(seq(1,50,2), res)
mu_1 = seq(0, 3, len = 25)
ploty <- tibble(results = results, mu_1 = mu_1)
ploty %>% ggplot(aes(mu_1, results)) + geom_point()
View(gulugulu)
str(gulugulu)
View(dat)
View(dat)
mu_1 = seq(0, 3, len = 25)
results <- sapply(mu_1, res)
set.seed(1)
res <- function(mu_1){
gulugulu <- make_data(mu_1)
fit <- glm(y ~ x, data = gulugulu$train, family = "binomial")
y_hat <- predict(fit, newdata = gulugulu$test, type = "response")
y_hat_logit <- ifelse(y_hat > 0.5, 1, 0) %>% factor()
return(mean(y_hat_logit == gulugulu$test$y))
}
mu_1 = seq(0, 3, len = 25)
results <- sapply(mu_1, res)
set.seed(1)
res <- function(mu_1){
gulugulu <- make_data(mu_1 = mu_1)
fit <- glm(y ~ x, data = gulugulu$train, family = "binomial")
y_hat <- predict(fit, newdata = gulugulu$test, type = "response")
y_hat_logit <- ifelse(y_hat > 0.5, 1, 0) %>% factor()
return(mean(y_hat_logit == gulugulu$test$y))
}
mu_1 = seq(0, 3, len = 25)
results <- sapply(mu_1, res)
ploty <- tibble(results = results, mu_1 = mu_1)
ploty %>% ggplot(aes(mu_1, results)) + geom_point()
# other names : curve fitting, low pass filtering
data("polls_2008")
qplot(day, margin, data = polls_2008)
# other names : curve fitting, low pass filtering
data("polls_2008")
library(dslabs)
# other names : curve fitting, low pass filtering
data("polls_2008")
qplot(day, margin, data = polls_2008)
# bin smoothing
# bin smoothers
span <- 7
fit <- with(polls_2008,ksmooth(day, margin, x.points = day, kernel="box", bandwidth =span))
polls_2008 %>% mutate(smooth = fit$y) %>%
ggplot(aes(day, margin)) +
geom_point(size = 3, alpha = .5, color = "grey") +
geom_line(aes(day, smooth), color="red")
# kernel
span <- 7
fit <- with(polls_2008, ksmooth(day, margin,  x.points = day, kernel="normal", bandwidth = span))
polls_2008 %>% mutate(smooth = fit$y) %>%
ggplot(aes(day, margin)) +
geom_point(size = 3, alpha = .5, color = "grey") +
geom_line(aes(day, smooth), color="red")
?with
polls_2008 %>% ggplot(aes(day, margin)) +
geom_point() +
geom_smooth(color="red", span = 0.15, method = "loess", method.args = list(degree=1))
polls_2008 %>% ggplot(aes(day, margin)) +
geom_point(alpha = 0.5, color = "grey") +
geom_smooth(color="red", span = 0.15, method = "loess", method.args = list(degree=1))
fit <- loess(margin ~ day, degree = 1, span = span, data = polls_2008)
total_days <- diff(range(polls_2008$days))
span <- 21/total_days
total_days <- diff(range(polls_2008$days))
total_days <- diff(range(polls_2008$day))
span <- 21/total_days
fit <- loess(margin ~ day, degree = 1, span = span, data = polls_2008)
polls_2008 %>% mutate(smooth = fit$fitted) +
ggplot(aes(day, margin)) +
geom_point(size = 3, alpha = 0.5, color = "grey") +
geom_line(aes(day, smooth), color = "red")
# other names : curve fitting, low pass filtering
data("polls_2008")
qplot(day, margin, data = polls_2008)
total_days <- diff(range(polls_2008$day))
span <- 21/total_days
fit <- loess(margin ~ day, degree = 1, span = span, data = polls_2008)
polls_2008 %>% mutate(smooth = fit$fitted) +
ggplot(aes(day, margin)) +
geom_point(size = 3, alpha = 0.5, color = "grey") +
geom_line(aes(day, smooth), color = "red")
polls_2008 %>% mutate(smooth = fit$fitted) +
ggplot(aes(day, margin)) +
geom_point(size = 3, alpha = 0.5, color = "grey") +
geom_line(aes(day, smooth), color = "red")
polls_2008 %>% mutate(smooth = fit$fitted) +
ggplot(aes(day, margin)) +
geom_point(size = 3, alpha = 0.5, color = "grey") +
geom_line(aes(day, smooth), color = "red")
polls_2008 %>% mutate(smooth = fit$fitted) %>%
ggplot(aes(day, margin)) +
geom_point(size = 3, alpha = 0.5, color = "grey") +
geom_line(aes(day, smooth), color = "red")
total_days <- diff(range(polls_2008$day))
span <- 21/total_days
fit <- loess(margin ~ day, degree = 1, span = span, data = polls_2008)
polls_2008 %>% mutate(smooth = fit$fitted) %>%
ggplot(aes(day, margin)) +
geom_point(size = 3, alpha = 0.5, color = "grey") +
geom_line(aes(day, smooth), color = "red")
fit <- loess(margin ~ day, degree = 1, span = span, data = polls_2008, family = "symmetric")
polls_2008 %>% mutate(smooth = fit$fitted) %>%
ggplot(aes(day, margin)) +
geom_point(size = 3, alpha = 0.5, color = "grey") +
geom_line(aes(day, smooth), color = "red")
fit <- loess(margin ~ day, degree = 1, span = span, data = polls_2008)
polls_2008 %>% mutate(smooth = fit$fitted) %>%
ggplot(aes(day, margin)) +
geom_point(size = 3, alpha = 0.5, color = "grey") +
geom_line(aes(day, smooth), color = "red")
polls_2008 %>% ggplot(aes(day, margin)) +
geom_point(alpha = 0.5, color = "grey") +
geom_smooth(color="red", span = 0.15, method = "loess", method.args = list(degree=1))
#using a polynomial of degree 2
polls_2008 %>% ggplot(aes(day, margin)) +
geom_point(alpha = 0.5, color = "grey") +
geom_smooth(color="red", span = 0.15, method = "loess", method.args = list(degree=1))
#using a polynomial of degree 2
polls_2008 %>% ggplot(aes(day, margin)) +
geom_point(alpha = 0.5, color = "grey") +
geom_smooth(color="red", span = 0.15, method = "loess", method.args = list(degree=2))
library(tidyverse)
library(tidyverse)
library(lubridate)
library(purrr)
library(pdftools)
fn <- system.file("extdata", "RD-Mortality-Report_2015-18-180531.pdf", package="dslabs")
dat <- map_df(str_split(pdf_text(fn), "\n"), function(s){
s <- str_trim(s)
header_index <- str_which(s, "2015")[1]
tmp <- str_split(s[header_index], "\\s+", simplify = TRUE)
month <- tmp[1]
header <- tmp[-1]
tail_index  <- str_which(s, "Total")
n <- str_count(s, "\\d+")
out <- c(1:header_index, which(n==1), which(n>=28), tail_index:length(s))
s[-out] %>%
str_remove_all("[^\\d\\s]") %>%
str_trim() %>%
str_split_fixed("\\s+", n = 6) %>%
.[,1:5] %>%
as_data_frame() %>%
setNames(c("day", header)) %>%
mutate(month = month,
day = as.numeric(day)) %>%
gather(year, deaths, -c(day, month)) %>%
mutate(deaths = as.numeric(deaths))
}) %>%
mutate(month = recode(month, "JAN" = 1, "FEB" = 2, "MAR" = 3, "APR" = 4, "MAY" = 5, "JUN" = 6,
"JUL" = 7, "AGO" = 8, "SEP" = 9, "OCT" = 10, "NOV" = 11, "DEC" = 12)) %>%
mutate(date = make_date(year, month, day)) %>%
dplyr::filter(date <= "2018-05-01")
library(tidyverse)
library(lubridate)
library(purrr)
library(pdftools)
fn <- system.file("extdata", "RD-Mortality-Report_2015-18-180531.pdf", package="dslabs")
dat <- map_df(str_split(pdf_text(fn), "\n"), function(s){
s <- str_trim(s)
header_index <- str_which(s, "2015")[1]
tmp <- str_split(s[header_index], "\\s+", simplify = TRUE)
month <- tmp[1]
header <- tmp[-1]
tail_index  <- str_which(s, "Total")
n <- str_count(s, "\\d+")
out <- c(1:header_index, which(n==1), which(n>=28), tail_index:length(s))
s[-out] %>%
str_remove_all("[^\\d\\s]") %>%
str_trim() %>%
str_split_fixed("\\s+", n = 6) %>%
.[,1:5] %>%
as_data_frame() %>%
setNames(c("day", header)) %>%
mutate(month = month,
day = as.numeric(day)) %>%
gather(year, deaths, -c(day, month)) %>%
mutate(deaths = as.numeric(deaths))
}) %>%
mutate(month = recode(month, "JAN" = 1, "FEB" = 2, "MAR" = 3, "APR" = 4, "MAY" = 5, "JUN" = 6,
"JUL" = 7, "AGO" = 8, "SEP" = 9, "OCT" = 10, "NOV" = 11, "DEC" = 12)) %>%
mutate(date = make_date(year, month, day)) %>%
dplyr::filter(date <= "2018-05-01")
fit <- loess(deaths ~ date, data = dat, span = 60, family = "symmetric")
fit <- loess(deaths ~ date, data = dat, span = 60, family = "symmetric", degree = 1)
View(dat)
fit <- loess(deaths ~ date, data = dat, span = 60, degree = 1)
fit <- loess(deaths ~ date, data = dat, span = 60, degree = 1)
fit <- loess(deaths ~ date, data = dat, span = 60, degree = 1)
timespan1 <- dmy(01/01/2019)
timespan1 <- dmy(01-01-2019)
timespan1 <- dmy("01-01-2019")
timespan2 <- dmy("01/03/2019")
timespan <- timespan1 %--% timespan2
as.duration(timespan)
plou <- as.duration(timespan)
fit <- loess(deaths ~ date, data = dat, span = plou, degree = 1)
fit <- loess(deaths ~ date, degree = 1, span = 0.03703, data = dat)
timespan1 <- dmy("01-01-2019")
timespan2 <- dmy("01/03/2019")
timespan <- timespan1 %--% timespan2
plou <- as.duration(timespan)
fit <- loess(deaths ~ date, degree = 1, span = 0.03703, data = dat)
library(tidyverse)
library(lubridate)
library(purrr)
library(pdftools)
fn <- system.file("extdata", "RD-Mortality-Report_2015-18-180531.pdf", package="dslabs")
dat <- map_df(str_split(pdf_text(fn), "\n"), function(s){
s <- str_trim(s)
header_index <- str_which(s, "2015")[1]
tmp <- str_split(s[header_index], "\\s+", simplify = TRUE)
month <- tmp[1]
header <- tmp[-1]
tail_index  <- str_which(s, "Total")
n <- str_count(s, "\\d+")
out <- c(1:header_index, which(n==1), which(n>=28), tail_index:length(s))
s[-out] %>%
str_remove_all("[^\\d\\s]") %>%
str_trim() %>%
str_split_fixed("\\s+", n = 6) %>%
.[,1:5] %>%
as_data_frame() %>%
setNames(c("day", header)) %>%
mutate(month = month,
day = as.numeric(day)) %>%
gather(year, deaths, -c(day, month)) %>%
mutate(deaths = as.numeric(deaths))
}) %>%
mutate(month = recode(month, "JAN" = 1, "FEB" = 2, "MAR" = 3, "APR" = 4, "MAY" = 5, "JUN" = 6,
"JUL" = 7, "AGO" = 8, "SEP" = 9, "OCT" = 10, "NOV" = 11, "DEC" = 12)) %>%
mutate(date = make_date(year, month, day)) %>%
dplyr::filter(date <= "2018-05-01")
fit <- loess(deaths ~ date, degree = 1, span = 0.03703, data = dat)
fit <- dat %>% mutate(x= as.numeric(date)) %>% loess(deaths ~ date, degree = 1, span = 0.03703, data = dat)
fit <- dat %>% mutate(x= as.numeric(date)) %>% loess(deaths ~ x, degree = 1, span = 0.03703, data = dat)
span <- 60 / as.numeric(diff(range(dat$date)))
fit <- dat %>% mutate(x = as.numeric(date)) %>% loess(deaths ~ x, degree = 1, span = 0.03703, data = dat)
fit <- dat %>% mutate(x = as.numeric(date)) %>% loess(deaths ~ x, degree = 1, span = 0.03703, data = dat)
dat %>% mutate(smooth = predict(fit, as.numeric(date))) %>%
ggplot() +
geom_point(aes(date, deaths)) +
geom_line(aes(date, smooth), lwd = 2, col = "red")
span <- 60 / as.numeric(diff(range(dat$date)))
fit <- dat %>% mutate(x = as.numeric(date)) %>% loess(deaths ~ x, degree = 1, span = 0.03703, data = dat)
library(tidyverse)
library(lubridate)
library(purrr)
library(pdftools)
fn <- system.file("extdata", "RD-Mortality-Report_2015-18-180531.pdf", package="dslabs")
dat <- map_df(str_split(pdf_text(fn), "\n"), function(s){
s <- str_trim(s)
header_index <- str_which(s, "2015")[1]
tmp <- str_split(s[header_index], "\\s+", simplify = TRUE)
month <- tmp[1]
header <- tmp[-1]
tail_index  <- str_which(s, "Total")
n <- str_count(s, "\\d+")
out <- c(1:header_index, which(n==1), which(n>=28), tail_index:length(s))
s[-out] %>%
str_remove_all("[^\\d\\s]") %>%
str_trim() %>%
str_split_fixed("\\s+", n = 6) %>%
.[,1:5] %>%
as_data_frame() %>%
setNames(c("day", header)) %>%
mutate(month = month,
day = as.numeric(day)) %>%
gather(year, deaths, -c(day, month)) %>%
mutate(deaths = as.numeric(deaths))
}) %>%
mutate(month = recode(month, "JAN" = 1, "FEB" = 2, "MAR" = 3, "APR" = 4, "MAY" = 5, "JUN" = 6,
"JUL" = 7, "AGO" = 8, "SEP" = 9, "OCT" = 10, "NOV" = 11, "DEC" = 12)) %>%
mutate(date = make_date(year, month, day)) %>%
dplyr::filter(date <= "2018-05-01")
span <- 60 / as.numeric(diff(range(dat$date)))
fit <- dat %>% mutate(x = as.numeric(date)) %>% loess(deaths ~ x, degree = 1, span = 0.03703, data = dat)
fit <- dat %>% mutate(x = as.numeric(date))
fit <- fit %>% loess(deaths ~ x, degree = 1, span = 0.03703, data = dat)
fit <- dat %>% mutate(x = as.numeric(date)) %>% loess(deaths ~ x, degree = 1, span = 0.03703, data = .)
dat %>% mutate(smooth = predict(fit, as.numeric(date))) %>%
ggplot() +
geom_point(aes(date, deaths)) +
geom_line(aes(date, smooth), lwd = 2, col = "red")
span <- 60 / as.numeric(diff(range(dat$date)))
span <- 60 / as.numeric(diff(range(dat$date)))
fit <- dat %>% mutate(x = as.numeric(date)) %>% loess(deaths ~ x, degree = 1, span = 0.03703, data = .)
dat %>% mutate(smooth = predict(fit, as.numeric(date))) %>%
ggplot() +
geom_point(aes(date, deaths)) +
geom_line(aes(date, smooth), lwd = 2, col = "red")
dat %>%
mutate(smooth = predict(fit, as.numeric(date)), day = yday(date), year = as.character(year(date))) %>%
ggplot(aes(day, smooth, col = year)) +
geom_line(lwd = 2)
library(broom)
mnist_27$train %>% glm(y ~ x_2, family = "binomial", data = .) %>% tidy()
library(dslabs)
data("mnist_27")
library(broom)
mnist_27$train %>% glm(y ~ x_2, family = "binomial", data = .) %>% tidy()
qplot(x_2, y, data = mnist_27$train)
mnist_27$train %>% glm(y ~ x_2, family = "binomial", data = .) %>% tidy()
qplot(x_2, y, data = mnist_27$train)
